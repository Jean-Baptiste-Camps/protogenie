<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns="http://relaxng.org/ns/structure/1.0"
    xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
    datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
    <start>
        <element name="config">
            <a:documentation>Configuration for PPA Splitter (See
                https://github.com/hipster-philology/ppa-spliter</a:documentation>
            <interleave>
                <ref name="post-processing"/>
                <ref name="corpora"/>
                <ref name="output"/>
                <element name="default-header">
                    <a:documentation>Default header (to avoid duplication)</a:documentation>
                    <ref name="header"/>
                </element>
                <element name="memory">
                    <a:documentation>Save or load indexes of lines saved in different file. CSV
                        file</a:documentation>
                    <ref name="path"/>
                </element>
            </interleave>
        </element>
    </start>
    <define name="output">
        <element name="output">
            <element name="header">
                <oneOrMore>
                    <element name="key">
                        <optional>
                            <ref name="map-to"/>
                        </optional>
                        <data type="string"/>
                    </element>
                </oneOrMore>
            </element>
        </element>
    </define>
    <define name="post-processing">
        <a:documentation>Steps for post-processing a single file</a:documentation>
        <element name="postprocessing">
            <interleave>
                <zeroOrMore>
                    <ref name="replace"/>
                </zeroOrMore>
                <zeroOrMore>
                    <ref name="skip"/>
                </zeroOrMore>
                <optional>
                    <ref name="disambiguation"/>
                </optional>
            </interleave>
        </element>
    </define>
    <define name="matchPattern">
        <attribute name="matchPattern">
            <a:documentation>Python regular expression valid with `regex` package</a:documentation>
            <data type="string" />
        </attribute>
    </define>
    <define name="skip">
        <element name="skip">
            <a:documentation>Removes a line if it matches @matchPattern</a:documentation>
            <ref name="matchPattern" />
            <empty />
        </element>
    </define>
    <define name="replace">
        <element name="replacement">
            <ref name="matchPattern" />
            <attribute name="replacementPattern">
                <data type="string"/>
            </attribute>
            <oneOrMore>
                <element name="applyTo">
                    <a:documentation>If source is different from target, groupes are deleted in source</a:documentation>
                    <attribute name="source">
                        <a:documentation>Column name</a:documentation>
                        <text/>
                    </attribute>
                    <oneOrMore>
                        <element name="target">
                            <a:documentation>Column name</a:documentation>
                            <text/>
                        </element>
                    </oneOrMore>
                </element>
            </oneOrMore>
        </element>
    </define>
    <define name="disambiguation">
        <element name="disambiguation">
            <interleave>
               <attribute name="lemma-column-name">
                   <data type="string"/>
               </attribute>
               <ref name="matchPattern" />
               <attribute name="disambiguation-column-name">
                   <data type="string"/>
               </attribute>
            </interleave>
        </element>
    </define>
    <define name="corpora">
        <a:documentation>This contains all corpora that should be split by PPA
            Splitter</a:documentation>
        <element name="corpora">
            <oneOrMore>
                <ref name="corpus"/>
            </oneOrMore>
        </element>
    </define>
    <define name="corpus">
        <element name="corpus">
            <a:documentation>A corpus consist of a single file that should be split, or a UNIX-like
                path such as mydata/*.tsv</a:documentation>
            <ref name="path"/>
            <attribute name="column_marker">
                <a:documentation>Strings that separates columns in the CSV. TAB is for
                    tabulation</a:documentation>
                <data type="string"/>
            </attribute>
            <interleave>
                <ref name="splitter"/>
                <ref name="header"/>
            </interleave>
        </element>
    </define>
    <define name="header">
        <element name="header">
            <choice>
                <group>
                    <a:documentation>Use the config/default-header</a:documentation>
                    <attribute name="type">
                        <value>default</value>
                    </attribute>
                </group>
                <group>
                    <a:documentation>Use this when the CSV has columns headers</a:documentation>
                    <attribute name="type">
                        <value>explicit</value>
                    </attribute>
                    <oneOrMore>
                        <element name="key">
                            <optional>
                                <ref name="map-to"/>
                            </optional>
                            <data type="string"/>
                        </element>
                    </oneOrMore>
                </group>
                <group>
                    <a:documentation>Use this when the CSV has no columns headers. Requires
                        mapping</a:documentation>
                    <attribute name="type">
                        <value>order</value>
                    </attribute>
                    <oneOrMore>
                        <element name="key">
                            <ref name="map-to"/>
                            <data type="int"/>
                        </element>
                    </oneOrMore>
                </group>
            </choice>
        </element>
    </define>
    <define name="map-to">
        <attribute name="map-to">
            <data type="string"/>
        </attribute>
    </define>
    <define name="splitter">
        <element name="splitter">
            <choice>
                <group>
                    <a:documentation>The token window splitter splits each @window tokens and
                        dispatch things into different datasets</a:documentation>
                    <attribute name="name">
                        <value>token_window</value>
                    </attribute>
                    <attribute name="window">
                        <data type="integer"/>
                    </attribute>
                </group>
                <group>
                    <attribute name="name">
                        <value>punctuation</value>
                    </attribute>
                    <attribute name="sentence_markers">
                        <data type="string"/>
                    </attribute>
                </group>
                <attribute name="name">
                    <a:documentation>Each empty line represent a new passage</a:documentation>
                    <value>empty_line</value>
                </attribute>
                <attribute name="name">
                    <a:documentation>The file is globally split in two or three, depending on the
                        number of datasets</a:documentation>
                    <value>file_split</value>
                </attribute>
            </choice>
            <optional>
                <ref name="documentation"/>
            </optional>
        </element>
    </define>
    <define name="documentation">
        <element name="documentation">
            <a:documentation>Used to explain choices</a:documentation>
            <data type="string"/>
        </element>
    </define>
    <define name="path">
        <attribute name="path">
            <a:documentation>Path to the file relative to the configuration file</a:documentation>
            <data type="anyURI"/>
        </attribute>
    </define>
</grammar>
